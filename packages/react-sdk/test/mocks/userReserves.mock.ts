export const mockUserReservesHookCall = {
    formatted: {
        //define it with values as expect.any(String) with the correct type
        expectedUserReserveData: {
            id: expect.any(String),
            underlyingAsset: expect.any(String),
            scaledATokenBalance: expect.any(String),
            usageAsCollateralEnabledOnUser: expect.any(Boolean),
            stableBorrowRate: expect.any(String),
            scaledVariableDebt: expect.any(String),
            principalStableDebt: expect.any(String),
            stableBorrowLastUpdateTimestamp: expect.any(Number),
            reserve: {
                id: expect.any(String),
                underlyingAsset: expect.any(String),
                name: expect.any(String),
                symbol: expect.any(String),
                decimals: expect.any(Number),
                baseLTVasCollateral: expect.any(String),
                reserveLiquidationThreshold: expect.any(String),
                reserveLiquidationBonus: expect.any(String),
                reserveFactor: expect.any(String),
                usageAsCollateralEnabled: expect.any(Boolean),
                borrowingEnabled: expect.any(Boolean),
                stableBorrowRateEnabled: expect.any(Boolean),
                isActive: expect.any(Boolean),
                isFrozen: expect.any(Boolean),
                liquidityIndex: expect.any(String),
                variableBorrowIndex: expect.any(String),
                liquidityRate: expect.any(String),
                variableBorrowRate: expect.any(String),
                stableBorrowRate: expect.any(String),
                lastUpdateTimestamp: expect.any(Number),
                aTokenAddress: expect.any(String),
                stableDebtTokenAddress: expect.any(String),
                variableDebtTokenAddress: expect.any(String),
                interestRateStrategyAddress: expect.any(String),
                availableLiquidity: expect.any(String),
                totalPrincipalStableDebt: expect.any(String),
                averageStableRate: expect.any(String),
                stableDebtLastUpdateTimestamp: expect.any(Number),
                totalScaledVariableDebt: expect.any(String),
                priceInMarketReferenceCurrency: expect.any(String),
                priceOracle: expect.any(String),
                variableRateSlope1: expect.any(String),
                variableRateSlope2: expect.any(String),
                stableRateSlope1: expect.any(String),
                stableRateSlope2: expect.any(String),
                baseStableBorrowRate: expect.any(String),
                baseVariableBorrowRate: expect.any(String),
                optimalUsageRatio: expect.any(String),
                isPaused: expect.any(Boolean),
                debtCeiling: expect.any(String),
                eModeCategoryId: expect.any(Number),
                borrowCap: expect.any(String),
                supplyCap: expect.any(String),
                eModeLtv: expect.any(Number),
                eModeLiquidationThreshold: expect.any(Number),
                eModeLiquidationBonus: expect.any(Number),
                eModePriceSource: expect.any(String),
                eModeLabel: expect.any(String),
                borrowableInIsolation: expect.any(Boolean),
                accruedToTreasury: expect.any(String),
                unbacked: expect.any(String),
                isolationModeTotalDebt: expect.any(String),
                debtCeilingDecimals: expect.any(Number),
                isSiloedBorrowing: expect.any(Boolean),
                flashLoanEnabled: expect.any(Boolean),
                totalDebt: expect.any(String),
                totalStableDebt: expect.any(String),
                totalVariableDebt: expect.any(String),
                totalLiquidity: expect.any(String),
                borrowUsageRatio: expect.any(String),
                supplyUsageRatio: expect.any(String),
                formattedReserveLiquidationBonus: expect.any(String),
                formattedEModeLiquidationBonus: expect.any(String),
                formattedEModeLiquidationThreshold: expect.any(String),
                formattedEModeLtv: expect.any(String),
                supplyAPY: expect.any(String),
                variableBorrowAPY: expect.any(String),
                stableBorrowAPY: expect.any(String),
                formattedAvailableLiquidity: expect.any(String),
                unborrowedLiquidity: expect.any(String),
                formattedBaseLTVasCollateral: expect.any(String),
                supplyAPR: expect.any(String),
                variableBorrowAPR: expect.any(String),
                stableBorrowAPR: expect.any(String),
                formattedReserveLiquidationThreshold: expect.any(String),
                debtCeilingUSD: expect.any(String),
                isolationModeTotalDebtUSD: expect.any(String),
                availableDebtCeilingUSD: expect.any(String),
                isIsolated: expect.any(Boolean),
                totalLiquidityUSD: expect.any(String),
                availableLiquidityUSD: expect.any(String),
                totalDebtUSD: expect.any(String),
                totalVariableDebtUSD: expect.any(String),
                totalStableDebtUSD: expect.any(String),
                formattedPriceInMarketReferenceCurrency: expect.any(String),
                priceInUSD: expect.any(String),
                borrowCapUSD: expect.any(String),
                supplyCapUSD: expect.any(String),
                unbackedUSD: expect.any(String),
            },
            underlyingBalance: expect.any(String),
            underlyingBalanceMarketReferenceCurrency: expect.any(String),
            underlyingBalanceUSD: expect.any(String),
            stableBorrows: expect.any(String),
            stableBorrowsMarketReferenceCurrency: expect.any(String),
            stableBorrowsUSD: expect.any(String),
            variableBorrows: expect.any(String),
            variableBorrowsMarketReferenceCurrency: expect.any(String),
            variableBorrowsUSD: expect.any(String),
            totalBorrows: expect.any(String),
            totalBorrowsMarketReferenceCurrency: expect.any(String),
            totalBorrowsUSD: expect.any(String),
            stableBorrowAPR: expect.any(String),
            stableBorrowAPY: expect.any(String),

        },
        expectedGeneralData: {
            userReservesData: expect.any(Array),
            "totalLiquidityMarketReferenceCurrency": expect.any(String),
            "totalLiquidityUSD": expect.any(String),
            "totalCollateralMarketReferenceCurrency": expect.any(String),
            "totalCollateralUSD": expect.any(String),
            "totalBorrowsMarketReferenceCurrency": expect.any(String),
            "totalBorrowsUSD": expect.any(String),
            "netWorthUSD": expect.any(String),
            "availableBorrowsMarketReferenceCurrency": expect.any(String),
            "availableBorrowsUSD": expect.any(String),
            "currentLoanToValue": expect.any(String),
            "currentLiquidationThreshold": expect.any(String),
            "healthFactor": expect.any(String),
            "isInIsolationMode": expect.any(Boolean),
            //TODO: match undefined + string.
            "isolatedReserve": undefined


        }
    }
}